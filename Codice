import java.io.File;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import javax.xml.parsers.DocumentBuilder;
import org.w3c.dom.Document;
import org.w3c.dom.NodeList;


public class DomParser {
	   
	public static void main(String[] args) { 
		   
		   int i =0;
		   String check="";
		   String updated="";
		   
		   try {
		    	  
		        File inputFile = new File("C:\\Users\\Piergiulio\\eclipse-workspace-CorsoJava\\XmlPractice\\src\\NewFile.xml"); // già sai
		         
		        DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
		        DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
		        Document doc = dBuilder.parse(inputFile);
		        
		        NodeList edt = doc.getElementsByTagName("cmn:EventDateTime");

		        	for ( i=0;i<edt.getLength();i++) {		        	
			        	
			        	if (check.equals(edt.item(i).getTextContent())==false) {	        		
			        	check = edt.item(i).getTextContent(); 
			        	updated = edt.item(i).getTextContent();
			        	
			        	} else {	
			        		updated = oneupper(updated);
			        		edt.item(i).setTextContent(updated);
			        	}
		        	
		        	System.out.println(i + " : " + edt.item(i).getTextContent());

		        }

		         TransformerFactory transformerFactory = TransformerFactory.newInstance();
		         Transformer transformer = transformerFactory.newTransformer();
		         DOMSource source = new DOMSource(doc);
		         StreamResult result = new StreamResult(new File ("C:\\Users\\Piergiulio\\eclipse-workspace-CorsoJava\\XmlPractice\\src\\SimonSays.xml")); // già sai
		         transformer.transform(source,result);
		         
		         StreamResult consoleResult = new StreamResult(System.out);
		         transformer.transform(source, consoleResult);
		         
		      } catch (Exception e) {
		         e.printStackTrace();
		     }
  }
	private static String oneupper(String sb) {
		
		byte bSec = Byte.parseByte(sb.substring(17,19));
		byte bMin = Byte.parseByte(sb.substring(14,16));
		byte bHou = Byte.parseByte(sb.substring(11,13));
		
		bSec++;
		
		if(bSec==60) {
			bSec=00;
			bMin++;
			if(bMin==60) {
				bMin=00;
				bHou++;
			}
		}
		String def = bHou+":"+bMin+":"+String.format("%02d", bSec);
		return sb.replace(sb.subSequence(11, 19), def);
	}
}
